import streamlit as st
st.set_page_config(page_title="Dashboard", page_icon="üìä", layout="wide")

# Import c√°c module kh√°c sau khi set_page_config
import pandas as pd
import re
import unicodedata as ud
import matplotlib as mpl
import math
import matplotlib.pyplot as plt
from db import init_db, list_questions, fetch_results, get_student

# Ki·ªÉm tra wordcloud
try:
    from wordcloud import WordCloud, STOPWORDS
    WORDCLOUD_AVAILABLE = True
except ImportError:
    WORDCLOUD_AVAILABLE = False

init_db()

# Quy·ªÅn xem dashboard nghi√™m ng·∫∑t:
# - Admin ƒëƒÉng nh·∫≠p lu√¥n xem ƒë∆∞·ª£c
# - Sinh vi√™n: ph·∫£i ƒëƒÉng nh·∫≠p (auth_msv t·ªìn t·∫°i) v√† ƒë√£ ho√†n th√†nh kh·∫£o s√°t
is_admin = bool(st.session_state.get("admin_auth"))
if not is_admin:
    auth_msv = st.session_state.get("auth_msv")
    if not auth_msv:
        st.error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng v√†o tab Sinh vi√™n ƒë·ªÉ ƒëƒÉng nh·∫≠p (OTP).")
        st.stop()
    stu = get_student(auth_msv)
    if not (stu and stu.get("completed")):
        st.error("B·∫°n ch∆∞a ho√†n th√†nh kh·∫£o s√°t n√™n ch∆∞a th·ªÉ xem Dashboard.")
        st.stop()

# Hi·ªÉn th·ªã th√¥ng b√°o v·ªÅ wordcloud n·∫øu c·∫ßn
if not WORDCLOUD_AVAILABLE:
    st.warning("‚ö†Ô∏è Module wordcloud ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ph·∫ßn WordCloud s·∫Ω b·ªã t·∫Øt.")

# CSS ƒë·ªÉ c·∫£i thi·ªán giao di·ªán
st.markdown("""
<style>
    .dashboard-title {
        font-size: 1.5rem !important;
        font-weight: 600;
        color: #1f77b4;
        margin-bottom: 1rem;
    }
    .section-header {
        font-size: 1.1rem !important;
        font-weight: 500;
        color: #2c3e50;
        margin-top: 1.5rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #ecf0f1;
    }
    .question-text {
        font-size: 0.9rem !important;
        font-weight: 500;
        color: #34495e;
        margin-bottom: 0.5rem;
    }
    .chart-caption {
        font-size: 0.75rem !important;
        color: #7f8c8d;
        font-style: italic;
    }
    .metric-box {
        background-color: #f8f9fa;
        padding: 0.8rem;
        border-radius: 8px;
        border-left: 4px solid #3498db;
        margin: 0.5rem 0;
    }
    .metric-box h3 {
        font-size: 0.9rem !important;
        margin: 0 0 0.3rem 0;
    }
    .metric-box h2 {
        font-size: 1.5rem !important;
        margin: 0;
        color: #2c3e50;
    }
</style>
""", unsafe_allow_html=True)

st.markdown('<h1 class="dashboard-title">üìä Dashboard</h1>', unsafe_allow_html=True)

# Gi·∫£m font m·∫∑c ƒë·ªãnh cho to√†n b·ªô bi·ªÉu ƒë·ªì
mpl.rcParams.update({
    'font.size': 6,
    'axes.titlesize': 6,
    'axes.labelsize': 6,
    'xtick.labelsize': 5,
    'ytick.labelsize': 5,
})

results = fetch_results()
if not results:
    st.info("üìù Ch∆∞a c√≥ d·ªØ li·ªáu ph·∫£n h·ªìi.")
    st.stop()

# Ch·∫∑n sinh vi√™n ch∆∞a ho√†n th√†nh xem dashboard n·∫øu ch·∫°y qua page sinh vi√™n
st.caption("Dashboard ch·ªâ ƒë·ªÉ xem t·ªïng h·ª£p. Sinh vi√™n c·∫ßn ho√†n th√†nh kh·∫£o s√°t ƒë·ªÉ xem ƒëi·ªÉm trong trang Sinh vi√™n.")

qs = list_questions()
qs_by_id = {q["id"]: q for q in qs}

df = pd.DataFrame(results)

# Th·ªëng k√™ t·ªïng quan
total_responses = len(df['msv'].unique())
total_questions = len(qs)
completed_surveys = len(df[df['question_id'] == qs[0]['id']])

col1, col2, col3 = st.columns(3)
with col1:
    st.markdown(f"""
    <div class="metric-box">
        <h3>üë• T·ªïng sinh vi√™n</h3>
        <h2>{total_responses}</h2>
    </div>
    """, unsafe_allow_html=True)
with col2:
    st.markdown(f"""
    <div class="metric-box">
        <h3>‚ùì T·ªïng c√¢u h·ªèi</h3>
        <h2>{total_questions}</h2>
    </div>
    """, unsafe_allow_html=True)
with col3:
    st.markdown(f"""
    <div class="metric-box">
        <h3>‚úÖ Ho√†n th√†nh</h3>
        <h2>{completed_surveys}</h2>
    </div>
    """, unsafe_allow_html=True)

st.markdown('<h2 class="section-header">üìà Ph√¢n Ph·ªëi C√¢u Tr·∫£ L·ªùi (Slider)</h2>', unsafe_allow_html=True)

for q in [q for q in qs if q["qtype"] == "slider"]:
    sub = df[df["question_id"] == q["id"]]
    counts = sub["value_int"].value_counts().sort_index()
    label_map = {1: q["low_label"], 2: q["mid_label"], 3: q["high_label"]}
    labels = [label_map.get(k, str(k)) for k in [1,2,3]]
    values = [int(counts.get(k, 0)) for k in [1,2,3]]

    st.markdown(f'<p class="question-text"><strong>{q["order_no"]}. {q["text"]}</strong></p>', unsafe_allow_html=True)
    
    # T·∫°o bi·ªÉu ƒë·ªì nh·ªè g·ªçn h∆°n - gi·∫£m th√™m 50% chi·ªÅu ngang
    fig, ax = plt.subplots(figsize=(2.4, 1.2), dpi=110)
    bars = ax.bar(labels, values, color=['#e74c3c', '#f39c12', '#27ae60'], alpha=0.8)
    
    # Th√™m s·ªë li·ªáu tr√™n c·ªôt
    for bar, value in zip(bars, values):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                f'{value}', ha='center', va='bottom', fontweight='bold', fontsize=7)
    
    ax.set_xlabel("M·ª©c ƒë√°nh gi√°", fontsize=5)
    ax.set_ylabel("S·ªë l∆∞·ª£ng", fontsize=5)
    ax.set_title("", fontsize=6)
    ax.grid(axis='y', alpha=0.3)
    ax.tick_params(axis='both', labelsize=5)
    plt.tight_layout()
    
    st.pyplot(fig, use_container_width=False)
    st.markdown(f'<p class="chart-caption">Thang ƒëo: 1 = {q["low_label"]} | 2 = {q["mid_label"]} | 3 = {q["high_label"]}</p>', unsafe_allow_html=True)
    st.divider()

if WORDCLOUD_AVAILABLE:
    st.markdown('<h2 class="section-header">‚òÅÔ∏è WordCloud (C√¢u H·ªèi M·ªü)</h2>', unsafe_allow_html=True)
    vn_stop = set([
        "v√†","l√†","c·ªßa","cho","c√°c","nh·ªØng","ƒë∆∞·ª£c","trong","khi","ƒë√£","v·ªõi","t√¥i",
        "c·∫ßn","r·∫•t","th√¨","n√™n","c√≥","kh√¥ng","c≈©ng","nh∆∞","ƒë·∫øn","ƒë·ªÉ","m·ªôt","m·ªçi",
        "v√¨","·ªü","ra","n√†y","kia","ƒë√≥","ƒëang","s·∫Ω","ƒëi","b·ªã","t·ª´","h·ªçc","m√¥n"
    ])
    stopwords = STOPWORDS.union(vn_stop)

    for q in [q for q in qs if q["qtype"] == "open"]:
        sub = df[(df["question_id"] == q["id"]) & (df["value_text"].notnull())]
        raw_texts = [str(x) for x in sub["value_text"].tolist() if str(x).strip()]
        if not raw_texts:
            continue

        # Gom theo c·ª•m c√¢u tr·∫£ l·ªùi gi·ªëng nhau (b·ªè kho·∫£ng tr·∫Øng th·ª´a v√† d·∫•u c√¢u cu·ªëi)
        canon_to_display: dict[str, tuple[str, int]] = {}
        for t in raw_texts:
            display = re.sub(r"\s+", " ", t.strip())
            # B·ªè k√Ω t·ª± ph√¢n t√°ch/d·∫•u c√¢u ·ªü cu·ªëi (Unicode), tr√°nh regex \p; d√πng unicodedata
            tmp = display
            while tmp and (ud.category(tmp[-1]).startswith('P') or ud.category(tmp[-1]).startswith('Z')):
                tmp = tmp[:-1]
            canonical = tmp.lower()
            if canonical in canon_to_display:
                old_disp, cnt = canon_to_display[canonical]
                canon_to_display[canonical] = (old_disp, cnt + 1)
            else:
                canon_to_display[canonical] = (display, 1)

        # T·∫°o frequencies theo c·ª•m c√¢u tr·∫£ l·ªùi (m·ªói c√¢u l√† m·ªôt token)
        frequencies = {disp: cnt for disp, cnt in canon_to_display.values()}

        try:
            # TƒÉng k√≠ch th∆∞·ªõc ch·ªØ theo t·∫ßn su·∫•t, nh∆∞ng v·∫´n gi·ªØ t·ªïng th·ªÉ g·ªçn
            max_count = max(frequencies.values())
            # T√≠nh max_font_size ƒë·ªông: c∆° s·ªü 18, c·ªông th√™m 6px cho m·ªói l·∫ßn l·∫∑p (t·ªëi ƒëa 60)
            dynamic_max_font = min(60, 18 + max_count * 6)
            wc = WordCloud(
                width=160,
                height=60,
                background_color="white",
                collocations=False,  # gi·ªØ nguy√™n c·ª•m, kh√¥ng t√°ch bigram
                max_words=30,
                max_font_size=int(dynamic_max_font),
                min_font_size=6,
                prefer_horizontal=1,
                margin=0,
                relative_scaling=0.5,
            ).generate_from_frequencies(frequencies)

            st.markdown(f'<p class="question-text"><strong>{q["order_no"]}. {q["text"]}</strong></p>', unsafe_allow_html=True)
            fig, ax = plt.subplots(figsize=(2.0, 0.9), dpi=120)
            ax.imshow(wc, interpolation="bilinear")
            ax.axis("off")
            plt.tight_layout()
            st.pyplot(fig, use_container_width=False)

            st.markdown(f'<p class="chart-caption">S·ªë c√¢u tr·∫£ l·ªùi: {len(raw_texts)} ¬∑ S·ªë c·ª•m kh√°c nhau: {len(frequencies)}</p>', unsafe_allow_html=True)
            st.divider()
        except Exception as e:
            st.error(f"L·ªói t·∫°o WordCloud cho c√¢u h·ªèi {q['order_no']}: {e}")
else:
    st.markdown('<h2 class="section-header">üìù C√¢u H·ªèi M·ªü (WordCloud T·∫°m Th·ªùi B·ªã T·∫Øt)</h2>', unsafe_allow_html=True)
    for q in [q for q in qs if q["qtype"] == "open"]:
        sub = df[(df["question_id"] == q["id"]) & (df["value_text"].notnull())]
        texts = [str(x) for x in sub["value_text"].tolist() if str(x).strip()]
        if texts:
            st.markdown(f'<p class="question-text"><strong>{q["order_no"]}. {q["text"]}</strong></p>', unsafe_allow_html=True)
            st.markdown(f'<div class="metric-box"><strong>S·ªë c√¢u tr·∫£ l·ªùi:</strong> {len(texts)}</div>', unsafe_allow_html=True)
            st.divider()
